{"version":3,"sources":["comp/Draggable.js","comp/Droppable.js","App.js","serviceWorker.js","index.js"],"names":["Draggable","props","react_default","a","createElement","className","draggable","onDragStart","e","ods","item","content","onClick","deleteItem","Droppable","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addItem","preventDefault","list","title","state","setState","hc","defineProperty","target","name","value","onDragOver","onDrop","id","dataTransfer","getData","moveItem","event","setData","ID","removeItem","itemMapper","i","comp_Draggable","key","removeList","listIndex","autocomplete","onSubmit","type","disabled","onChange","items","map","Component","App","addList","listTitles","concat","toConsumableArray","listTitle","filter","nextID","itemID","newList","parseInt","listMapper","src_comp_Droppable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86c7288e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Draggable.css';\r\n\r\nfunction Draggable(props) {\r\n  return (\r\n    <div className=\"Draggable\"\r\n      draggable\r\n      onDragStart={e => props.ods(e, props.item)}\r\n    >\r\n      {props.item.content}\r\n      <button className=\"delete-button\" onClick={props.deleteItem}>X</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Draggable;\r\n","import React, { Component } from 'react';\r\nimport Draggable from './Draggable';\r\nimport './Droppable.css';\r\n\r\nclass Droppable extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      item: ''\r\n    }\r\n  }\r\n\r\n  addItem = e => {\r\n    e.preventDefault();\r\n    this.props.addItem({\r\n      list: this.props.title,\r\n      content: this.state.item\r\n    });\r\n    this.setState({ item: '' });\r\n  }\r\n\r\n  hc = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onDragOver = e => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  onDrop = e => {\r\n    const id = e.dataTransfer.getData(\"id\");\r\n    this.props.moveItem(id, this.props.title);\r\n  }\r\n\r\n  onDragStart = (event, item) => {\r\n    event.dataTransfer.setData(\"content\", item.content);\r\n    event.dataTransfer.setData(\"id\", item.ID);\r\n  }\r\n\r\n  deleteItem = id => {\r\n    this.props.removeItem(id);\r\n  }\r\n\r\n  itemMapper = (e, i) => {\r\n    return (\r\n      <Draggable key={i}\r\n        item={e}\r\n        ods={this.onDragStart}\r\n        deleteItem={() => this.deleteItem(e.ID)}\r\n      />\r\n    );\r\n  }\r\n\r\n  removeList = () => {\r\n    this.props.removeList(this.props.listIndex);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Droppable\"\r\n        onDragOver={this.onDragOver}\r\n        onDrop={this.onDrop}\r\n      >\r\n        <div className=\"droppable-top\">\r\n          <h1>{this.props.title}</h1>\r\n          <button className=\"delete-button\" onClick={this.removeList}>X</button>\r\n        </div>\r\n        <form autocomplete=\"off\" onSubmit={this.addItem}>\r\n          <button type=\"submit\" disabled={!this.state.item}>\r\n            NEW ITEM\r\n        </button>\r\n          <input onChange={this.hc} name=\"item\" value={this.state.item} />\r\n        </form>\r\n        {this.props.items.map(this.itemMapper)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Droppable;\r\n","import React, { Component } from 'react';\r\nimport Droppable from './comp/Droppable';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      listTitles: [],\r\n      listTitle: '',\r\n      items: [],\r\n      nextID: 0\r\n    }\r\n  }\r\n\r\n  hc = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  addList = e => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      listTitles: [...this.state.listTitles, this.state.listTitle],\r\n      listTitle: ''\r\n    })\r\n  }\r\n\r\n  removeList = listIndex => {\r\n    this.setState({\r\n      items: this.state.items.filter(e => {\r\n        return e.list !== this.state.listTitles[listIndex]\r\n      }),\r\n      listTitles: this.state.listTitles.filter((e, i) => i !== listIndex)\r\n    })\r\n  }\r\n\r\n  addItem = item => {\r\n    item.ID = this.state.nextID;\r\n    this.setState({\r\n      items: [...this.state.items, item],\r\n      nextID: this.state.nextID + 1\r\n    })\r\n  }\r\n\r\n  moveItem = (itemID, newList) => {\r\n    this.setState({\r\n      items: this.state.items.map(e => {\r\n        if (e.ID === parseInt(itemID)) {\r\n          e.list = newList;\r\n        }\r\n        return e;\r\n      })\r\n    })\r\n  }\r\n\r\n  removeItem = itemID => {\r\n    this.setState({\r\n      items: this.state.items.filter(e => e.ID !== itemID)\r\n    })\r\n  }\r\n\r\n  listMapper = (title, i) => {\r\n    return (\r\n      <Droppable key={i}\r\n        listIndex={i}\r\n        title={title}\r\n        items={this.state.items.filter(e => e.list === title)}\r\n        addItem={this.addItem}\r\n        removeItem={this.removeItem}\r\n        moveItem={this.moveItem}\r\n        removeList={this.removeList}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <form autocomplete=\"off\" onSubmit={this.addList}>\r\n          <button type=\"submit\" disabled={!this.state.listTitle}>\r\n            ADD ANOTHER LIST\r\n          </button>\r\n          <input onChange={this.hc}\r\n            name=\"listTitle\"\r\n            value={this.state.listTitle}\r\n          />\r\n        </form>\r\n        <div className=\"the-lists\">\r\n          {this.state.listTitles.map(this.listMapper)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}