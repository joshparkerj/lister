{"version":3,"sources":["comp/Draggable.js","comp/Droppable.js","App.js","serviceWorker.js","index.js"],"names":["Draggable","props","react_default","a","createElement","className","draggable","onDragStart","e","ods","item","content","onClick","deleteItem","Droppable","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addItem","preventDefault","list","title","state","setState","hc","defineProperty","target","name","value","onDragOver","onDrop","id","dataTransfer","getData","moveItem","event","setData","ID","removeItem","itemMapper","i","comp_Draggable","key","removeList","listIndex","autocomplete","onSubmit","type","disabled","onChange","items","map","Component","App","addList","listTitles","concat","toConsumableArray","listTitle","filter","nextID","itemID","newList","parseInt","listMapper","src_comp_Droppable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f25da469.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Draggable.css';\r\n\r\nfunction Draggable(props) {\r\n  return (\r\n    <div className=\"Draggable\"\r\n      draggable\r\n      onDragStart={e => props.ods(e, props.item)}\r\n    >\r\n      {props.item.content}\r\n      <button className=\"delete-button\" onClick={props.deleteItem}>X</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Draggable;\r\n","import React, { Component } from 'react';\r\nimport Draggable from './Draggable';\r\nimport './Droppable.css';\r\n\r\nclass Droppable extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      item: ''\r\n    }\r\n  }\r\n\r\n  addItem = e => {\r\n    e.preventDefault();\r\n    this.props.addItem({\r\n      list: this.props.title,\r\n      content: this.state.item\r\n    });\r\n    this.setState({ item: '' });\r\n  }\r\n\r\n  hc = e => {\r\n    this.setState({ [e.target.name]: e.target.value })\r\n  }\r\n\r\n  onDragOver = e => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  onDrop = e => {\r\n    const id = e.dataTransfer.getData(\"id\");\r\n    this.props.moveItem(id, this.props.title);\r\n  }\r\n\r\n  onDragStart = (event, item) => {\r\n    event.dataTransfer.setData(\"content\", item.content);\r\n    event.dataTransfer.setData(\"id\", item.ID);\r\n  }\r\n\r\n  deleteItem = id => {\r\n    this.props.removeItem(id);\r\n  }\r\n\r\n  itemMapper = (e, i) => {\r\n    return (\r\n      <Draggable key={i}\r\n        item={e}\r\n        ods={this.onDragStart}\r\n        deleteItem={() => this.deleteItem(e.ID)}\r\n      />\r\n    );\r\n  }\r\n\r\n  removeList = () => {\r\n    this.props.removeList(this.props.listIndex);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Droppable\"\r\n        onDragOver={this.onDragOver}\r\n        onDrop={this.onDrop}\r\n      >\r\n        <div className=\"droppable-top\">\r\n          <h1>{this.props.title}</h1>\r\n          <button className=\"delete-button\" onClick={this.removeList}>X</button>\r\n        </div>\r\n        <form autocomplete=\"off\" onSubmit={this.addItem}>\r\n          <button type=\"submit\" disabled={!this.state.item}>\r\n            ADD ITEM TO THIS LIST\r\n        </button>\r\n          <input onChange={this.hc} name=\"item\" value={this.state.item} />\r\n        </form>\r\n        {this.props.items.map(this.itemMapper)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Droppable;\r\n","import React, { Component } from 'react';\nimport Droppable from './comp/Droppable';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      listTitles: [],\n      listTitle: '',\n      items: [],\n      nextID: 0\n    }\n  }\n\n  hc = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  addList = e => {\n    e.preventDefault();\n    this.setState({\n      listTitles: [...this.state.listTitles, this.state.listTitle],\n      listTitle: ''\n    })\n  }\n\n  removeList = listIndex => {\n    this.setState({\n      items: this.state.items.filter(e => {\n        return e.list !== this.state.listTitles[listIndex]\n      }),\n      listTitles: this.state.listTitles.filter((e, i) => i !== listIndex)\n    })\n  }\n\n  addItem = item => {\n    item.ID = this.state.nextID;\n    this.setState({\n      items: [...this.state.items, item],\n      nextID: this.state.nextID + 1\n    })\n  }\n\n  moveItem = (itemID, newList) => {\n    this.setState({\n      items: this.state.items.map(e => {\n        if (e.ID === parseInt(itemID)) {\n          e.list = newList;\n        }\n        return e;\n      })\n    })\n  }\n\n  removeItem = itemID => {\n    this.setState({\n      items: this.state.items.filter(e => e.ID !== itemID)\n    })\n  }\n\n  listMapper = (title, i) => {\n    return (\n      <Droppable key={i}\n        listIndex={i}\n        title={title}\n        items={this.state.items.filter(e => e.list === title)}\n        addItem={this.addItem}\n        removeItem={this.removeItem}\n        moveItem={this.moveItem}\n        removeList={this.removeList}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form autocomplete=\"off\" onSubmit={this.addList}>\n          <button type=\"submit\" disabled={!this.state.listTitle}>\n            ADD ANOTHER LIST\n          </button>\n          <input onChange={this.hc}\n            name=\"listTitle\"\n            value={this.state.listTitle}\n          />\n        </form>\n        <div className=\"the-lists\">\n          {this.state.listTitles.map(this.listMapper)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}